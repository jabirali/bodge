#!/usr/bin/env python

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from icecream import ic
from typer import run

# np.set_printoptions(precision=12, floatmode="fixednu")

np.set_printoptions(formatter={"float": "{: 0.12f}".format})


def free(df: pd.DataFrame, s1: int, s2: int):
    """Calculate the free energy for a given configuration of two impurity spins.

    The spins are assumed to be specified as {±1, ±2, ±3} for the three cardinal
    axes, which is translated to the notations {x±, y±, z±} used in data files.

    If data is missing for that spin configuration, we just return NaN. This
    automatically voids any derived
    """
    spins = {
        +1: "x+",
        +2: "y+",
        +3: "z+",
        -1: "x-",
        -2: "y-",
        -3: "z-",
    }

    s1_ = spins[s1]
    s2_ = spins[s2]

    try:
        return float(df[(df["s1"] == s1_) & (df["s2"] == s2_)].E)
    except:
        return np.nan


def main(filename: str):
    """Plot the results generated by RKKY calculations."""

    df0 = pd.read_csv(filename, names=["dvec", "s1", "s2", "sep", "E"], skipinitialspace=True)
    df0 = df0.sort_values(by=["dvec", "sep", "s1", "s2"])
    ic(df0)

    for d, df1 in df0.groupby("dvec"):
        xs = []
        ys = []
        y1 = []
        y2 = []
        y3 = []
        for δ, df2 in df1.groupby("sep"):
            ic(δ)

            # Calculate the preferred absolute orientation of each spin.
            μ1 = np.zeros(3)
            μ2 = np.zeros(3)

            for s1 in [1, 2, 3]:
                for s2 in [+1, +2, +3, -1, -2, -3]:
                    μ1[s1 - 1] += free(df2, +s1, s2) / 12
                    μ1[s1 - 1] -= free(df2, -s1, s2) / 12

                    μ2[s1 - 1] += free(df2, s2, +s1) / 12
                    μ2[s1 - 1] -= free(df2, s2, -s1) / 12

            ic(μ1)
            ic(μ2)

            # Calculate the interactions between the two spins.
            η = np.zeros((3, 3))
            for s1 in [1, 2, 3]:
                for s2 in [1, 2, 3]:
                    η[s1 - 1, s2 - 1] += free(df2, +s1, +s2) / 4
                    η[s1 - 1, s2 - 1] -= free(df2, +s1, -s2) / 4
                    η[s1 - 1, s2 - 1] -= free(df2, -s1, +s2) / 4
                    η[s1 - 1, s2 - 1] += free(df2, -s1, -s2) / 4

            ic(η)

            xs.append(δ)
            y1.append(η[0, 0])
            y2.append(η[1, 1])
            y3.append(η[2, 2])

        fig, ax = plt.subplots()
        ax.plot(xs, y1, label=r"$\eta_{xx}$")
        ax.plot(xs, y2, dashes=(16, 16), label=r"$\eta_{yy}$")
        ax.plot(xs, y3, dashes=(12, 12), label=r"$\eta_{zz}$")
        plt.legend()
        plt.xlabel(r"Separation $δ/a$")
        plt.ylabel(r"RKKY interaction $J_{eff}$")
        plt.grid()
        plt.ylim([-0.015, 0.015])
        plt.show()

        plt.plot(xs, [(i3 - i2) for i2, i3 in zip(y2, y3)])
        plt.show()


if __name__ == "__main__":
    run(main)
