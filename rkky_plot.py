#!/usr/bin/env python

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from icecream import ic
from typer import run

# np.set_printoptions(precision=12, floatmode="fixednu")

np.set_printoptions(formatter={"float": "{: 0.12f}".format})


def main(filename: str):
    """Plot the results generated by RKKY calculations."""

    df0 = pd.read_csv(filename, names=["dvec", "s1", "s2", "sep", "E"], skipinitialspace=True)
    df0 = df0.sort_values(by=["dvec", "sep", "s1", "s2"])
    ic(df0)

    for d, df1 in df0.groupby("dvec"):
        xs = []
        ys = []
        y1 = []
        y2 = []
        y3 = []
        for δ, df2 in df1.groupby("sep"):

            def free(s1, s2):
                try:
                    return float(df2[(df2["s1"] == s1) & (df2["s2"] == s2)].E)
                except:
                    return np.nan

            μ1_x = (
                0
                + free("x+", "x+")
                + free("x+", "x-")
                + free("x+", "y+")
                + free("x+", "y-")
                + free("x+", "z+")
                + free("x+", "z-")
                - free("x-", "x+")
                - free("x-", "x-")
                - free("x-", "y+")
                - free("x-", "y-")
                - free("x-", "z+")
                - free("x-", "z-")
            ) / 12

            μ1_y = (
                0
                + free("y+", "x+")
                + free("y+", "x-")
                + free("y+", "y+")
                + free("y+", "y-")
                + free("y+", "z+")
                + free("y+", "z-")
                - free("y-", "x+")
                - free("y-", "x-")
                - free("y-", "y+")
                - free("y-", "y-")
                - free("y-", "z+")
                - free("y-", "z-")
            ) / 12

            μ1_z = (
                0
                + free("z+", "x+")
                + free("z+", "x-")
                + free("z+", "y+")
                + free("z+", "y-")
                + free("z+", "z+")
                + free("z+", "z-")
                - free("z-", "x+")
                - free("z-", "x-")
                - free("z-", "y+")
                - free("z-", "y-")
                - free("z-", "z+")
                - free("z-", "z-")
            ) / 12

            μ1 = np.array([μ1_x, μ1_y, μ1_z])

            μ2_x = (
                0
                + free("x+", "x+")
                + free("x-", "x+")
                + free("y+", "x+")
                + free("y-", "x+")
                + free("z+", "x+")
                + free("z-", "x+")
                - free("x+", "x-")
                - free("x-", "x-")
                - free("y+", "x-")
                - free("y-", "x-")
                - free("z+", "x-")
                - free("z-", "x-")
            ) / 12

            μ2_y = (
                0
                + free("x+", "y+")
                + free("x-", "y+")
                + free("y+", "y+")
                + free("y-", "y+")
                + free("z+", "y+")
                + free("z-", "y+")
                - free("x+", "y-")
                - free("x-", "y-")
                - free("y+", "y-")
                - free("y-", "y-")
                - free("z+", "y-")
                - free("z-", "y-")
            ) / 12

            μ2_z = (
                0
                + free("x+", "z+")
                + free("x-", "z+")
                + free("y+", "z+")
                + free("y-", "z+")
                + free("z+", "z+")
                + free("z-", "z+")
                - free("x+", "z-")
                - free("x-", "z-")
                - free("y+", "z-")
                - free("y-", "z-")
                - free("z+", "z-")
                - free("z-", "z-")
            ) / 12

            μ2 = np.array([μ2_x, μ2_y, μ2_z])

            η_xx = (free("x+", "x+") - free("x+", "x-") - free("x-", "x+") + free("x-", "x-")) / 4
            η_xy = (free("x+", "y+") - free("x+", "y-") - free("x-", "y+") + free("x-", "y-")) / 4
            η_xz = (free("x+", "z+") - free("x+", "z-") - free("x-", "z+") + free("x-", "z-")) / 4

            η_yx = (free("y+", "x+") - free("y+", "x-") - free("y-", "x+") + free("y-", "x-")) / 4
            η_yy = (free("y+", "y+") - free("y+", "y-") - free("y-", "y+") + free("y-", "y-")) / 4
            η_yz = (free("y+", "z+") - free("y+", "z-") - free("y-", "z+") + free("y-", "z-")) / 4

            η_zx = (free("z+", "x+") - free("z+", "x-") - free("z-", "x+") + free("z-", "x-")) / 4
            η_zy = (free("z+", "y+") - free("z+", "y-") - free("z-", "y+") + free("z-", "y-")) / 4
            η_zz = (free("z+", "z+") - free("z+", "z-") - free("z-", "z+") + free("z-", "z-")) / 4

            η = np.array([[η_xx, η_xy, η_xz], [η_yx, η_yy, η_yz], [η_zx, η_zy, η_zz]])

            ic(δ, μ1, μ2, η)

            xs.append(δ)
            ys.append((η_xx + η_yy + η_zz) / 3)

            y1.append(η_xx)
            y2.append(η_yy)
            y3.append(η_zz)

        fig, ax = plt.subplots()
        ax.plot(xs, y1, label=r"$\eta_{xx}$")
        ax.plot(xs, y2, dashes=(16, 16), label=r"$\eta_{yy}$")
        ax.plot(xs, y3, dashes=(12, 12), label=r"$\eta_{zz}$")
        plt.legend()
        plt.xlabel(r"Separation $δ/a$")
        plt.ylabel(r"RKKY interaction $J_{eff}$")
        plt.grid()
        plt.ylim([-0.015, 0.015])
        plt.show()

        plt.plot(xs, [(i3 - i2) for i2, i3 in zip(y2, y3)])
        plt.show()


if __name__ == "__main__":
    run(main)
